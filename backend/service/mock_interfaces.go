// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	models "github.com/Rajprakashkarimsetti/apica-project/models"
	gomock "github.com/golang/mock/gomock"
)

// MockLruCacher is a mock of LruCacher interface.
type MockLruCacher struct {
	ctrl     *gomock.Controller
	recorder *MockLruCacherMockRecorder
}

// MockLruCacherMockRecorder is the mock recorder for MockLruCacher.
type MockLruCacherMockRecorder struct {
	mock *MockLruCacher
}

// NewMockLruCacher creates a new mock instance.
func NewMockLruCacher(ctrl *gomock.Controller) *MockLruCacher {
	mock := &MockLruCacher{ctrl: ctrl}
	mock.recorder = &MockLruCacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLruCacher) EXPECT() *MockLruCacherMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockLruCacher) Get(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockLruCacherMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLruCacher)(nil).Get), key)
}

// Set mocks base method.
func (m *MockLruCacher) Set(cache *models.CacheData) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", cache)
}

// Set indicates an expected call of Set.
func (mr *MockLruCacherMockRecorder) Set(cache interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLruCacher)(nil).Set), cache)
}
